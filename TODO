Module reloading
- When reloading a module which creates objects then the old
  objects should possibly be destroyed
- Methods doesn't seem to be reloaded, look into this
- Figure out how objects move on collision

2018-01-25
==========

- Why is tick-object the list to be in to recieve keyboard events?
- What is event-objects for then?

- All the {event,tick,draw}-lists should have some way to
  ensure that the same objects isn't put there multiple times 

- I use `#:init-value (func)' in a few places. Can this cause
  issues if the fields of the created objects are modified.
  Since all instances of the class possibly share the object

- with-new-scene definitions isn't found by ctags

2018-01-26
==========

- ss-inspector should be extended to support non-rectangular
  and non-regular sprites.

2018-01-31
==========

- Mouse-btn-events should only be sent to objects it would hit
  This could probably be solved by requiring everything that
  wants <mouse-btn-event> to implement an `in-object` method.
  	Only if this method is true for the coordinate of the
  specific event would the object recieve the event.
- I should also sort event objects in a Z order. And allow any
  object to intercept an event. This is mostly for mouse event,
  so I can choose between an event activating everything in its
  patth. Or only the top object. (think UI vs game)

2018-03-23
==========

- Drawing should respect z order of objects
- tick_objects, draw_objects and collide_objects should all
  probably be moved to inside the scheme code. See `event_objects`
  for a reference of how to possibly do it.
- Makefile currenttly remakes everything whenever make is run

2018-03-30
==========
+ I should start throttling the main loop. Currently it
  drains all my CPU resources, which is less than desirable.

2018-03-31
==========
- CPU throttling is now in effect, it should however instead
  check how long the frame took to handle, and wait up until
  the correct time. 

========================================

resolve-module
reload-module
define-once (defvar)
(reload-module (resolve-module '(engine)))
,reload (engine)
